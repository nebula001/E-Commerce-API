# E-Commerce API OpenAPI Specification

openapi: 3.0.0
info:
  title: E-Commerce API
  description: API for an e-commerce platform with user authentication, product management, reviews, and orders
  version: 1.0.0
servers:
  - url: "https://e-commerce-api-alri.onrender.com/api/v1"
    description: Production server
  - url: "http://localhost:3000/api/v1"
    description: Local development server

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=abcde12345; Path=/; HttpOnly; Secure; SameSite=Strict
        "400":
          description: Invalid input
        "409":
          description: Email already exists

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate a user and set authentication cookie
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=abcde12345; Path=/; HttpOnly; Secure; SameSite=Strict
        "401":
          description: Invalid credentials

  /auth/logout:
    get:
      tags:
        - Authentication
      summary: Logout user
      description: End user session and clear authentication cookie
      responses:
        "200":
          description: Logout successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=; Path=/; HttpOnly; Secure; SameSite=Strict; Max-Age=0

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users (Admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, admin access required

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a single user
      description: Retrieve details for a specific user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      security:
        - cookieAuth: []
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

  /users/showMe:
    get:
      tags:
        - Users
      summary: Get current user
      description: Retrieve the currently authenticated user's details
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Current user details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized

  /users/updateUser:
    patch:
      tags:
        - Users
      summary: Update user details
      description: Update the currently authenticated user's information
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /users/updateUserPassword:
    patch:
      tags:
        - Users
      summary: Update user password
      description: Change the currently authenticated user's password
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordUpdate"
      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a list of all products with optional filtering
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter by product name
        - in: query
          name: featured
          schema:
            type: boolean
          description: Filter by featured status
        - in: query
          name: sort
          schema:
            type: string
          description: Sort field (e.g., price, name)
        - in: query
          name: fields
          schema:
            type: string
          description: Select specific fields
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

    post:
      tags:
        - Products
      summary: Create a product
      description: Add a new product (Admin only)
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, admin access required

  /products/uploadImage:
    post:
      tags:
        - Products
      summary: Upload product image
      description: Upload an image for a product (Admin only)
      security:
        - cookieAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file
      responses:
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    description: Image URL
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, admin access required

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a single product
      description: Retrieve details for a specific product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found

    patch:
      tags:
        - Products
      summary: Update a product
      description: Update a specific product (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductUpdate"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, admin access required
        "404":
          description: Product not found

    delete:
      tags:
        - Products
      summary: Delete a product
      description: Remove a specific product (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Product deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, admin access required
        "404":
          description: Product not found

  /products/{id}/review:
    get:
      tags:
        - Products
      summary: Get product reviews
      description: Fetch all reviews for a specific product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        "200":
          description: List of reviews for the product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "404":
          description: Product not found

  /reviews:
    get:
      tags:
        - Reviews
      summary: Get all reviews
      description: Retrieve a list of all reviews
      responses:
        "200":
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"

    post:
      tags:
        - Reviews
      summary: Create a review
      description: Add a new review for a product
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCreate"
      responses:
        "201":
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /reviews/{id}:
    get:
      tags:
        - Reviews
      summary: Get a single review
      description: Retrieve details for a specific review
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Review ID
      responses:
        "200":
          description: Review details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "404":
          description: Review not found

    patch:
      tags:
        - Reviews
      summary: Update a review
      description: Update a specific review (owner only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Review ID
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewUpdate"
      responses:
        "200":
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, not owner
        "404":
          description: Review not found

    delete:
      tags:
        - Reviews
      summary: Delete a review
      description: Remove a specific review (owner or admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Review ID
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Review deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, not owner or admin
        "404":
          description: Review not found

  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      description: Retrieve a list of all orders (Admin only)
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, admin access required

    post:
      tags:
        - Orders
      summary: Create an order
      description: Place a new order
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreate"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /orders/showAllMyOrders:
    get:
      tags:
        - Orders
      summary: Get current user orders
      description: Retrieve orders for the currently authenticated user
      security:
        - cookieAuth: []
      responses:
        "200":
          description: List of user's orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get a single order
      description: Retrieve details for a specific order
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, not owner or admin
        "404":
          description: Order not found

    patch:
      tags:
        - Orders
      summary: Update order status
      description: Update the status of a specific order (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, failed, paid, delivered, canceled]
      responses:
        "200":
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Forbidden, admin access required
        "404":
          description: Order not found

components:
  schemas:
    UserRegistration:
      type: object
      properties:
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password
      required:
        - name
        - email
        - password

    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password
      required:
        - email
        - password

    UserResponse:
      type: object
      properties:
        id:
          type: string
          description: User ID
        name:
          type: string
          description: User's full name
        email:
          type: string
          description: User's email address
        role:
          type: string
          enum: [user, admin]
          description: User's role

    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
        name:
          type: string
          description: User's full name
        email:
          type: string
          description: User's email address
        role:
          type: string
          enum: [user, admin]
          description: User's role
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: User last update timestamp

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address

    PasswordUpdate:
      type: object
      properties:
        oldPassword:
          type: string
          format: password
          description: Current password
        newPassword:
          type: string
          format: password
          description: New password
      required:
        - oldPassword
        - newPassword

    Product:
      type: object
      properties:
        id:
          type: string
          description: Product ID
        name:
          type: string
          description: Product name
        price:
          type: number
          description: Product price
        description:
          type: string
          description: Product description
        image:
          type: string
          description: URL to product image
        category:
          type: string
          description: Product category
        company:
          type: string
          description: Company that produces the product
        colors:
          type: array
          items:
            type: string
          description: Available colors
        featured:
          type: boolean
          description: Whether the product is featured
        freeShipping:
          type: boolean
          description: Whether the product has free shipping
        inventory:
          type: integer
          description: Current inventory count
        averageRating:
          type: number
          description: Average product rating
        numOfReviews:
          type: integer
          description: Number of reviews
        user:
          type: string
          description: ID of the user who created the product
        createdAt:
          type: string
          format: date-time
          description: Product creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Product last update timestamp

    ProductCreate:
      type: object
      properties:
        name:
          type: string
          description: Product name
        price:
          type: number
          description: Product price
        description:
          type: string
          description: Product description
        image:
          type: string
          description: URL to product image
        category:
          type: string
          description: Product category
        company:
          type: string
          description: Company that produces the product
        colors:
          type: array
          items:
            type: string
          description: Available colors
        featured:
          type: boolean
          description: Whether the product is featured
        freeShipping:
          type: boolean
          description: Whether the product has free shipping
        inventory:
          type: integer
          description: Current inventory count
      required:
        - name
        - price
        - description
        - category
        - company
        - inventory

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
          description: Product name
        price:
          type: number
          description: Product price
        description:
          type: string
          description: Product description
        image:
          type: string
          description: URL to product image
        category:
          type: string
          description: Product category
        company:
          type: string
          description: Company that produces the product
        colors:
          type: array
          items:
            type: string
          description: Available colors
        featured:
          type: boolean
          description: Whether the product is featured
        freeShipping:
          type: boolean
          description: Whether the product has free shipping
        inventory:
          type: integer
          description: Current inventory count

    Review:
      type: object
      properties:
        id:
          type: string
          description: Review ID
        rating:
          type: number
          description: Rating (1-5)
        title:
          type: string
          description: Review title
        comment:
          type: string
          description: Review text
        user:
          type: string
          description: ID of the user who created the review
        product:
          type: string
          description: ID of the product being reviewed
        createdAt:
          type: string
          format: date-time
          description: Review creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Review last update timestamp

    ReviewCreate:
      type: object
      properties:
        rating:
          type: number
          description: Rating (1-5)
        title:
          type: string
          description: Review title
        comment:
          type: string
          description: Review text
        product:
          type: string
          description: ID of the product being reviewed
      required:
        - rating
        - title
        - product
        - comment

    ReviewUpdate:
      type: object
      properties:
        rating:
          type: number
          description: Rating (1-5)
        title:
          type: string
          description: Review title
        comment:
          type: string
          description: Review text

    OrderItem:
      type: object
      properties:
        name:
          type: string
          description: Product name
        price:
          type: number
          description: Product price
        image:
          type: string
          description: Product image URL
        amount:
          type: integer
          description: Quantity ordered
        product:
          type: string
          description: Product ID
      required:
        - name
        - price
        - image
        - amount
        - product

    Order:
      type: object
      properties:
        id:
          type: string
          description: Order ID
        tax:
          type: number
          description: Tax amount
        shippingFee:
          type: number
          description: Shipping fee
        subtotal:
          type: number
          description: Subtotal before tax and shipping
        total:
          type: number
          description: Total order amount
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
          description: Ordered items
        status:
          type: string
          enum: [pending, failed, paid, delivered, canceled]
          description: Order status
        user:
          type: string
          description: ID of the user who placed the order
        clientSecret:
          type: string
          description: Payment processor client secret
        paymentIntentId:
          type: string
          description: Payment processor intent ID
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Order last update timestamp

    OrderCreate:
      type: object
      properties:
        tax:
          type: number
          description: Tax amount
        shippingFee:
          type: number
          description: Shipping fee
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
          description: Items to order
      required:
        - tax
        - shippingFee
        - items

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
